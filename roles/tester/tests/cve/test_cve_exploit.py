# coding=utf-8
"""Perform exploit from <cve> feature tests."""

from pytest_bdd import (
    given,
    scenario,
    then,
    when,
)


@scenario('../features/cve.feature', 'Victim node should pass all checks after performing exploit')
def test_victim_node_should_pass_all_checks_after_performing_exploit(ssh_abuser, ssh_victim):
    """Victim node should pass all checks after performing exploit."""


@given('prepared <abuser> node')
def prepared_abuser_node(ssh_abuser, cvet_params):
    """prepared <abuser> node."""
    res = ssh_abuser.exec_command('for s in ~abuser/cve/{cve}/abuser-side-*.sh; do $s; done'.format(cve=cvet_params['cve']))
    assert res['rc'] == 0, "STDERR: {}\nSTDOUT: {}".format(res['stderr'], res['stdout'])


@given('prepared <victim> node')
def prepared_victim_node(ssh_abuser, ssh_victim, cvet_params):
    """prepared <victim> node."""
    res = ssh_abuser.exec_command('for s in ~abuser/cve/{cve}/victim-side-*.sh; do scp $s {victim}:/tmp/$(basename $s); done'.format(cve=cvet_params['cve'], victim=cvet_params['victim_node_short']))
    assert res['rc'] == 0, "STDERR: {}\nSTDOUT: {}".format(res['stderr'], res['stdout'])
    res = ssh_victim.exec_command('for s in /tmp/victim-side-*.sh; do $s; done')
    assert res['rc'] == 0, "STDERR: {}\nSTDOUT: {}".format(res['stderr'], res['stdout'])


@when('exploit is finished')
def exploit_is_finished(ssh_abuser, cvet_params):
    """exploit is finished."""
    env=' '.join(['{}="{}"'.format(k,v) for k,v in cvet_params.items()])
    res = ssh_abuser.exec_command('pushd ~abuser/cve/{cve}/; {env_vars} timeout --kill-after=10 --signal=9 -v {ttl} ./perform-sploit.sh'.format(cve=cvet_params['cve'], ttl=cvet_params['ttl'], env_vars=env))
    assert res['rc'] == (128 + 9), "STDERR: {}\nSTDOUT: {}".format(res['stderr'], res['stdout'])


@then('all checks against <victim> are passed')
def all_checks_against_victim_are_passed(ssh_abuser, ssh_victim, cvet_params):
    """all checks against <victim> are passed."""
    env=' '.join(['{}="{}"'.format(k,v) for k,v in cvet_params.items()])
    res = ssh_abuser.exec_command('for s in ~abuser/cve/{cve}/check-victim-*.sh; do scp $s {victim}:/tmp/$(basename $s); done'.format(cve=cvet_params['cve'], victim=cvet_params['victim_node_short']))
    res = ssh_victim.exec_command('{env_vars} /tmp/check-victim-*.sh'.format(env_vars=env))
    assert res['rc'] == 0, "STDERR: {}\nSTDOUT: {}".format(res['stderr'], res['stdout'])

